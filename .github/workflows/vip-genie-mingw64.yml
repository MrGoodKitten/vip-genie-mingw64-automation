name: VIP Genie CI/CD (MinGW64)

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - '**/docs/**'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy after tests?'
        type: choice
        required: true
        default: 'no'
        options: ['no', 'staging', 'production']
      artifact-retention-days:
        description: 'Days to keep artifacts'
        required: true
        default: '7'

permissions:
  contents: read
  id-token: write
  actions: read
  checks: write

concurrency:
  group: vip-genie-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  CMAKE_GENERATOR: 'MinGW Makefiles'
  MINGW_PREFIX: C:/msys64/mingw64
  CACHE_KEY_BASIS: v1-mingw64

jobs:
  prepare:
    name: Prep Toolchain and Cache
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSYS2/MinGW64
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          release: true
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-gdb
            mingw-w64-x86_64-pkg-config

      - name: Show toolchain versions
        shell: bash
        run: |
          g++ --version
          cmake --version
          ninja --version || true

      - name: Compute cache key seed
        id: cache-seed
        shell: pwsh
        run: |
          $hash = (Get-FileHash -Path (git ls-files) -Algorithm SHA256).Hash | Select-Object -First 1
          echo "seed=$hash" >> $env:GITHUB_OUTPUT

      - name: Cache CMake/Ninja build outputs
        id: cache-build
        uses: actions/cache@v4
        with:
          path: |
            build
            .ccache
            ${{ env.MINGW_PREFIX }}\lib\cmake
          key: ${{ env.CACHE_KEY_BASIS }}-${{ runner.os }}-${{ hashFiles('CMakeLists.txt', '**/*.cmake', 'vcpkg.json', 'src/**', 'include/**') }}-${{ steps.cache-seed.outputs.seed }}
          restore-keys: |
            ${{ env.CACHE_KEY_BASIS }}-${{ runner.os }}-

  build:
    name: Build (CMake + MinGW64)
    runs-on: windows-latest
    needs: prepare
    timeout-minutes: 30
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4

      - name: Setup MSYS2/MinGW64
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          release: true
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja

      - name: Configure (CMake)
        run: |
          cmake -S . -B build \
            -G "${CMAKE_GENERATOR}" \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_MAKE_PROGRAM=mingw32-make \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_CXX_COMPILER=g++

      - name: Build
        run: |
          cmake --build build --config ${BUILD_TYPE} -- -j%NUMBER_OF_PROCESSORS%

      - name: Package artifact
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item -Recurse -Force build\* dist\
          Compress-Archive -Path dist\* -DestinationPath artifact.zip -Force

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: vip-genie-mingw64-${{ github.sha }}
          path: artifact.zip
          retention-days: ${{ inputs.artifact-retention-days || 7 }}

  test:
    name: Unit Tests (ctest)
    runs-on: windows-latest
    needs: build
    timeout-minutes: 20
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4

      - name: Setup MSYS2/MinGW64
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          release: true
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake

      - name: Configure tests
        run: |
          cmake -S . -B build -G "${CMAKE_GENERATOR}" -DCMAKE_BUILD_TYPE=${BUILD_TYPE}

      - name: Run tests
        run: |
          ctest --test-dir build --output-on-failure -j%NUMBER_OF_PROCESSORS%

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ github.sha }}
          path: build/Testing
          retention-days: 7

  deploy:
    name: Deploy (VIP Genie)
    runs-on: windows-latest
    needs: [build, test]
    if: >-
      ${{ github.event_name == 'workflow_dispatch' && inputs.deploy != 'no' || github.ref_name == 'main' }}
    timeout-minutes: 30
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: vip-genie-mingw64-${{ github.sha }}
          path: deploy

      - name: Expand package
        shell: pwsh
        run: |
          Expand-Archive -Path deploy\artifact.zip -DestinationPath deploy\expanded -Force
          Get-ChildItem -Recurse deploy\expanded | Format-List | Out-String | Write-Host

      - name: Prepare release metadata
        id: meta
        shell: pwsh
        env:
          DEPLOY_ENV: ${{ inputs.deploy || 'staging' }}
        run: |
          $tag = "genie-${{ github.run_number }}-${env:DEPLOY_ENV}"
          "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "name=VIP Genie Release $tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Deploy to S3 (example)
        if: ${{ inputs.deploy == 'production' || inputs.deploy == 'staging' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        shell: pwsh
        run: |
          if (-not $env:S3_BUCKET) { throw 'S3_BUCKET secret is missing' }
          aws --version
          aws s3 cp deploy/expanded s3://$env:S3_BUCKET/${{ github.repository }}/ --recursive --region $env:AWS_REGION

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ steps.meta.outputs.name }}
          tag_name: ${{ steps.meta.outputs.tag }}
          body: |
            Automated VIP Genie release from MinGW64 build.
            Commit: ${{ github.sha }}
            Environment: ${{ inputs.deploy || 'staging' }}
          files: |
            deploy/artifact.zip

      - name: Notify webhook (VIP Genie ping)
        if: ${{ secrets.GENIE_WEBHOOK_URL != '' }}
        env:
          WEBHOOK: ${{ secrets.GENIE_WEBHOOK_URL }}
        shell: pwsh
        run: |
          try {
            Invoke-RestMethod -Uri $env:WEBHOOK -Method POST -Body (@{repo='${{ github.repository }}'; sha='${{ github.sha }}'; status='deployed'} | ConvertTo-Json) -ContentType 'application/json'
          } catch { Write-Warning $_ }

  security:
    name: Security Scan (optional)
    runs-on: windows-latest
    if: ${{ secrets.ENABLE_CODEQL == 'true' }}
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: cpp
      - uses: github/codeql-action/analyze@v3
